对象:属性  变量
	方法 函数  实现功能



继承   重写




del
对象即将销毁时，就会自动调用此方法
del __del__(self):
	print("提示")

如果想要在对象销毁/删除/释放前做某些事件
通过此方是否调用就可以知道对象是否正常释放


继承
作用：减少重复代码的冗余，提升代码的可读性，提升开发效率
继承：当某一个类想要拥有另一个类中的方法或属性
两个或多个类之间有共同的属性或方法，把公有的属性和方法写在父类里面，另一个类取调用
继承中，有子类和父类，父类和子类是相对关系
class Dog:
	def est(self):
		print("")
class XTC(Dog）：类名（继承的类，继类/父类）


默认所有类都有一个object的基类
所有类都是object的子类
class Dog(object):


继承链：当前类 --> 父类 --> ..-->



重写父类的方法
当父类的方法不适用，需要在子类中修改父类的方法
子类定义和父类同名的方法，就叫重写父类的方法

如果有继承是调用方法的顺序：当前类--> 父类--> ...>object
父类只能掉自己的方法


调用父类中被重写的方法
1,调用父类的方法 ：指定父类名.方法（手动传递此方法的对象）

2,super(对象名, self).父类方法名()     找指定类在继承链中的下一个类

 简写 super().父类方法名()     一般都是用第二种  单个， 多层继承

查看当前类的继承链  类名.__mro_







init和属性的继承
属性和方法都是可以被子类继承的
如果子类中需要定义自己独有的属性时，需要重写__intie方法，但是重写init后父类中的属性就无法继承了
在自己的init方法中，去手动调用父类的init 达到父类属性也可以继承的问题




私有属性和方法的继承
私有属性不会被继承   但是可以间接去通过调用父类的方法 而取到父类的私有属性   间接访问
私有方法也不会被继承 但可以间接去通过调用父类的公有方法，间接去调用父类自己的私有方法


多继承 类名（父类1, 父类2）
同时继承多个父类   
如果有多继承时还想调用父类方法  不能用super


